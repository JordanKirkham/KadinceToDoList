{"version":3,"sources":["Components/EntryForm.js","Components/Sort.js","Components/IncompleteList.js","Components/CompleteList.js","Components/SelectedList.js","App.js","index.js"],"names":["EntryForm","newItem","handleChange","handleSubmit","class","onSubmit","autocomplete","for","type","complete","placeholder","name","value","entry","onChange","Sort","handleSort","onClick","IncompleteList","allPending","handleDelete","handleComp","handleEdit","handleConfirmEdit","handleEditChange","map","id","editState","fakeId","CompleteList","allComp","style","textDecorationLine","SelectedList","chosenSort","className","App","useState","setNewItem","setAllPending","editItem","setEditItem","useEffect","editValue","setEditValue","compItem","setCompItem","setAllComp","prev","setChosenSort","currArr","itemIdToRemove","setCurr","filter","item","target","Date","now","event","preventDefault","evId","currId","findIndex","obj","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dae965f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function EntryForm({\r\n    newItem,\r\n    handleChange,\r\n    handleSubmit\r\n}) {\r\n    return (\r\n        <div class='column'>\r\n            <form onSubmit={handleSubmit} autocomplete='off' >\r\n                <label for='to-do-input' />\r\n                <input\r\n                    type='text'\r\n                    complete='false'\r\n                    placeholder='Type here'\r\n                    name='entry'\r\n                    value={newItem.entry || ''}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type='submit' name='submit-button' >\r\n                    Add Item\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );  \r\n}   ","import React from 'react';\r\n\r\nexport default function Sort ({ handleSort }) {\r\n    return (\r\n        <div class='column' >\r\n            <label >View:</label>\r\n            <hr></hr>\r\n            <button name='All' onClick={handleSort} >\r\n                All\r\n            </button>\r\n            <button name='Incomplete' onClick={handleSort} >\r\n                Incomplete\r\n            </button>\r\n            <button name='Complete' onClick={handleSort} >\r\n                Complete\r\n            </button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function IncompleteList ({\r\n    allPending,\r\n    handleDelete,\r\n    handleComp,\r\n    handleEdit,\r\n    handleConfirmEdit,\r\n    handleEditChange\r\n}) {\r\n    return (\r\n        <ul>\r\n            {allPending.map(({ entry, id, editState }) => (\r\n                <li\r\n                    key={id}\r\n                >\r\n                    <div>\r\n                        <h2 id={id} >{ entry }</h2>\r\n                        <button name={ entry } onClick={() => handleComp(id, entry)} >\r\n                            &#10003;\r\n                        </button>\r\n                        <button onClick={() => handleDelete(allPending, id)} >\r\n                            X\r\n                        </button>\r\n                        <button onClick={() => handleEdit(id)}>\r\n                            Edit\r\n                        </button>\r\n                        {!editState ? null : (\r\n                            <div id='editDiv' >\r\n                                <input\r\n                                    type='text'\r\n                                    name='entryEdit'\r\n                                    placeholder='Edit here'\r\n                                    onChange={handleEditChange}\r\n                                    autocomplete='off'\r\n                                />\r\n                                <button fakeId={id} onClick={handleConfirmEdit} >\r\n                                    Confirm\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function CompleteList ({ allComp, handleDelete }) {\r\n    return (\r\n        <ul>\r\n            {allComp.map(({ name, id }) => (\r\n                <li \r\n                    key={id}\r\n                    style={{textDecorationLine: 'line-through'}}\r\n                >\r\n                    <div>\r\n                        <h2>{ name }</h2>\r\n                        <button onClick={() => handleDelete(allComp, id)} >\r\n                            X\r\n                        </button>\r\n                    </div>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}","import React from 'react';\r\nimport IncompleteList from './IncompleteList';\r\nimport CompleteList from './CompleteList';\r\n\r\nexport default function SelectedList ({\r\n    chosenSort,\r\n    allPending,\r\n    handleDelete,\r\n    handleComp,\r\n    allComp,\r\n    handleEdit,\r\n    handleConfirmEdit,\r\n    handleEditChange\r\n}) {\r\n\r\n    if (chosenSort === 'Complete') {\r\n        return (        \r\n            <div className='list' >  \r\n                <CompleteList \r\n                    allComp={allComp}\r\n                    handleDelete={handleDelete}\r\n                />\r\n            </div>  \r\n        );\r\n\r\n    } else if (chosenSort === 'Incomplete') {\r\n        return (\r\n            <div className='list' >\r\n                <IncompleteList\r\n                    allPending={allPending}\r\n                    handleDelete={handleDelete}\r\n                    handleComp={handleComp}\r\n                    handleEdit={handleEdit}\r\n                    handleConfirmEdit={handleConfirmEdit}\r\n                    handleEditChange={handleEditChange}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    } else if (chosenSort === 'All') {\r\n        return (\r\n            <div className='list' >\r\n                <IncompleteList\r\n                    allPending={allPending}\r\n                    handleDelete={handleDelete}\r\n                    handleComp={handleComp}\r\n                    handleEdit={handleEdit}\r\n                    handleConfirmEdit={handleConfirmEdit}\r\n                    handleEditChange={handleEditChange}\r\n                />\r\n                <CompleteList \r\n                    allComp={allComp}\r\n                    handleDelete={handleDelete}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    } else {\r\n        return <p>a</p>;\r\n    }\r\n}","      // IMPORTS\r\n\r\nimport './App.css';\r\nimport EntryForm from './Components/EntryForm';\r\nimport Sort from './Components/Sort';\r\nimport SelectedList from './Components/SelectedList';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction App() {\r\n\r\n        // ITEM CREATION\r\n\r\n  // State Hook for newly created to-do items\r\n  const [newItem, setNewItem] = useState({});\r\n\r\n  // Function which handles changes in the Entry text input\r\n  const handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    setNewItem((prev) => ({\r\n      ...prev,\r\n      id: Date.now(),\r\n      [name]: value,\r\n      editState: false\r\n    }));\r\n  };\r\n\r\n  /* State Hook for creating arrays of incomplete to-do items\r\n     Used the name allPending since allIncomplete was more difficult to read */\r\n  const [allPending, setAllPending] = useState([]);\r\n\r\n  // Function which handles the Submit button being clicked\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!newItem.entry) return;\r\n    setAllPending((prev) => [ ...prev, newItem ]);\r\n    setNewItem({});\r\n  };\r\n\r\n\r\n\r\n        // EDITING ITEMS\r\n\r\n  // State Hook for finding and storing the index of the item\r\n  // which needs to be edited\r\n  const [editItem, setEditItem] = useState(-1);\r\n\r\n  // Function which handles the Edit button being clicked\r\n  const handleEdit = (currId) => {\r\n    setEditItem(allPending.findIndex(obj => obj.id === currId));\r\n  };\r\n\r\n  // Effect Hook for changing the editState of the current item\r\n  useEffect(() => {\r\n    if (allPending[editItem] ) {\r\n      allPending[editItem].editState = true;\r\n      setNewItem({})\r\n    }\r\n  }, [editItem]);\r\n\r\n  // State Hook for holding the value from the Edit text input\r\n  const [editValue, setEditValue] = useState('Temp');\r\n\r\n  // Function which handles changes in the Edit text input\r\n  const handleEditChange = ({ target }) => {\r\n    setEditValue(target.value);\r\n  };\r\n\r\n  // Function which handles the Confirm Edit button being clicked\r\n  const handleConfirmEdit = ({ target }) => {\r\n    allPending[editItem].entry = editValue;\r\n    allPending[editItem].editState = false;\r\n    setAllPending((prev) => [ ...prev ]);\r\n    handleDelete(allPending, target.fakeId);\r\n  };\r\n\r\n\r\n\r\n        // ITEM COMPLETION\r\n\r\n  // State Hook for recreating items from the Incomplete array\r\n  // and deleting them from there\r\n  const [compItem, setCompItem] = useState({});\r\n\r\n  // Function which handles the Checkmark button being clicked\r\n  const handleComp = (evId, entry) => {\r\n    setCompItem((prev) => ({ ...prev, name: entry, id: Date.now() }));\r\n    handleDelete(allPending, evId);\r\n  };\r\n\r\n  // State Hook for adding all Complete Items to an array\r\n  const [allComp, setAllComp] = useState([]);\r\n\r\n  // Effect Hook for setting All Complete Items into their array\r\n  useEffect(() => {\r\n    if (compItem.name) {\r\n      setAllComp((prev) => [ compItem, ...prev ]);\r\n    }\r\n  }, [compItem]);\r\n\r\n\r\n\r\n        // SORTING ITEMS\r\n\r\n  // State Hook for keeping track of which Sort the user wants\r\n  const [chosenSort, setChosenSort] = useState('All');\r\n\r\n  // Function which handles any sorting button being clicked\r\n  const handleSort = ({ target }) => {\r\n    setChosenSort(target.name);\r\n  };\r\n\r\n\r\n\r\n        // DELETING ITEMS\r\n\r\n  // Function which handles any delete button being clicked\r\n  const handleDelete = (currArr, itemIdToRemove) => {\r\n    let setCurr;\r\n\r\n    if (currArr === allPending) {\r\n      setCurr = setAllPending;\r\n    } else if (currArr === allComp) {\r\n      setCurr = setAllComp;\r\n    }\r\n\r\n    setCurr((prev) => prev.filter(\r\n      (item) => item.id !== itemIdToRemove\r\n    ));\r\n  };\r\n\r\n\r\n\r\n        // JSX\r\n\r\n  // JSX from several .js files, compiled together\r\n  return (\r\n    <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <h1>\r\n        To-Do List\r\n      </h1>\r\n      <h3>\r\n        By Jordan Kirkham\r\n      </h3>\r\n    </header>\r\n    <div className='allForm'>\r\n      <EntryForm\r\n        newItem={newItem}\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n      <Sort\r\n        handleSort={handleSort}\r\n      />\r\n    </div>\r\n    <SelectedList\r\n      chosenSort={chosenSort}\r\n      allPending={allPending}\r\n      handleDelete={handleDelete}\r\n      handleComp={handleComp}\r\n      allComp={allComp}\r\n      handleEdit={handleEdit}\r\n      handleConfirmEdit={handleConfirmEdit}\r\n      handleEditChange={handleEditChange}\r\n    />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}